#!/usr/bin/env python3
"""
Konwersja plik√≥w .doc do .txt dla korpusu cybernetyki
U≈ºywa m√∫ltiple metod konwersji: docx2txt, mammoth, python-docx, textract
"""

import os
import subprocess
from pathlib import Path

def convert_with_docx2txt(doc_path):
    """Pr√≥ba konwersji przez docx2txt (najlepsze dla .docx)"""
    try:
        import docx2txt
        doc_path = Path(doc_path)
        
        # docx2txt dzia≈Ça g≈Ç√≥wnie na .docx, ale spr√≥bujmy
        text = docx2txt.process(str(doc_path))
        
        if text and text.strip():
            txt_path = doc_path.parent / f"{doc_path.stem}.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(f"=== {doc_path.stem} ===\n")
                f.write(f"Converted from: {doc_path.name}\n")
                f.write("Generated by: docx2txt\n\n")
                f.write(text)
            
            return txt_path
        return None
        
    except Exception as e:
        print(f"‚ùå docx2txt error: {e}")
        return None

def convert_with_mammoth(doc_path):
    """Pr√≥ba konwersji przez mammoth (najlepsze dla .docx)"""
    try:
        import mammoth
        doc_path = Path(doc_path)
        
        with open(doc_path, "rb") as docx_file:
            result = mammoth.extract_raw_text(docx_file)
            text = result.value
        
        if text and text.strip():
            txt_path = doc_path.parent / f"{doc_path.stem}.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(f"=== {doc_path.stem} ===\n")
                f.write(f"Converted from: {doc_path.name}\n")
                f.write("Generated by: mammoth\n\n")
                f.write(text)
            
            return txt_path
        return None
        
    except Exception as e:
        print(f"‚ùå mammoth error: {e}")
        return None

def convert_with_python_docx(doc_path):
    """Pr√≥ba konwersji przez python-docx (g≈Ç√≥wnie .docx)"""
    try:
        from docx import Document
        doc_path = Path(doc_path)
        
        doc = Document(str(doc_path))
        text_parts = []
        
        for paragraph in doc.paragraphs:
            text_parts.append(paragraph.text)
        
        text = '\n'.join(text_parts)
        
        if text and text.strip():
            txt_path = doc_path.parent / f"{doc_path.stem}.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(f"=== {doc_path.stem} ===\n")
                f.write(f"Converted from: {doc_path.name}\n")
                f.write("Generated by: python-docx\n\n")
                f.write(text)
            
            return txt_path
        return None
        
    except Exception as e:
        print(f"‚ùå python-docx error: {e}")
        return None

def convert_with_textract(doc_path):
    """Pr√≥ba konwersji przez textract"""
    try:
        import textract
        doc_path = Path(doc_path)
        text = textract.process(str(doc_path)).decode('utf-8')
        
        if text and text.strip():
            txt_path = doc_path.parent / f"{doc_path.stem}.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(f"=== {doc_path.stem} ===\n")
                f.write(f"Converted from: {doc_path.name}\n")
                f.write("Generated by: textract\n\n")
                f.write(text)
            
            return txt_path
        return None
        
    except Exception as e:
        print(f"‚ùå textract error: {e}")
        return None

def convert_with_libreoffice(doc_path, output_dir=None):
    """Konwertuje plik .doc do .txt u≈ºywajƒÖc LibreOffice"""
    doc_path = Path(doc_path)
    if output_dir is None:
        output_dir = doc_path.parent
    
    try:
        # LibreOffice konwersja: doc -> txt
        cmd = [
            'libreoffice', '--headless', '--convert-to', 'txt',
            '--outdir', str(output_dir), str(doc_path)
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            txt_file = output_dir / f"{doc_path.stem}.txt"
            return txt_file if txt_file.exists() else None
        else:
            print(f"‚ùå LibreOffice error: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        print(f"‚ùå LibreOffice timeout")
        return None
    except FileNotFoundError:
        print("‚ùå LibreOffice not found")
        return None

def convert_doc_file(doc_path):
    """Pr√≥buje r√≥≈ºne metody konwersji pliku .doc"""
    doc_path = Path(doc_path)
    print(f"\nüîÑ Przetwarzam: {doc_path.name}")
    
    # Sprawd≈∫ czy .txt ju≈º istnieje
    txt_file = doc_path.parent / f"{doc_path.stem}.txt"
    if txt_file.exists():
        print(f"‚ö†Ô∏è  Plik {txt_file.name} ju≈º istnieje, pomijam")
        return True
    
    # Lista metod do wypr√≥bowania (w kolejno≈õci preferencji)
    conversion_methods = [
        ("textract", convert_with_textract),
        ("mammoth", convert_with_mammoth),
        ("python-docx", convert_with_python_docx), 
        ("docx2txt", convert_with_docx2txt),
        ("libreoffice", convert_with_libreoffice)
    ]
    
    for method_name, method_func in conversion_methods:
        print(f"üîÑ Pr√≥ba z {method_name}...")
        result = method_func(doc_path)
        
        if result and result.exists():
            size = result.stat().st_size
            print(f"‚úÖ Sukces ({method_name}): {result.name} ({size} bajt√≥w)")
            return True
    
    print(f"‚ùå Wszystkie metody zawiod≈Çy dla: {doc_path.name}")
    return False

def main():
    """Konwertuj wszystkie pliki .doc w folderach"""
    
    print("üìÑ Konwersja plik√≥w .doc do .txt")
    print("=" * 40)
    
    # Znajd≈∫ wszystkie pliki .doc
    doc_files = []
    for folder in ['TEXTS/autonom/Kossecki', 'TEXTS/autonom/Mazur']:
        if os.path.exists(folder):
            doc_files.extend(list(Path(folder).glob('*.doc')))
    
    if not doc_files:
        print("‚ùå Nie znaleziono plik√≥w .doc")
        return
    
    print(f"üìÅ Znaleziono {len(doc_files)} plik√≥w .doc")
    
    converted = 0
    failed = 0
    
    for doc_file in doc_files:
        if convert_doc_file(doc_file):
            converted += 1
        else:
            failed += 1
    
    print(f"\nüìä PODSUMOWANIE KONWERSJI .DOC:")
    print(f"‚úÖ Skonwertowane: {converted}")
    print(f"‚ùå Nieudane: {failed}")
    print(f"üìù Razem plik√≥w .doc: {len(doc_files)}")

if __name__ == "__main__":
    main() 